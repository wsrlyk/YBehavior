<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Description>
	<Languages>
		<ReturnSuccess>返回成功</ReturnSuccess>
		<ReturnFailure>返回失败</ReturnFailure>
	</Languages>
        <Nodes>
                <ReadRegister Content="读取寄存器，并保存到变量中。如无数据，返回失败；否则返回成功，并清空寄存器">
                        <Event Content="事件名，用于区分寄存器中的值的来源"/>
                        <Int Content="Int型的数据"/>
                        <Float Content="Float型的数据"/>
                        <Bool Content="Bool型的数据"/>
                        <Ulong Content="Ulong型的数据"/>
                        <String Content="String型的数据"/>
                </ReadRegister>
                <WriteRegister Content="写入寄存器。写完清空输入数组">
                        <Event Content="事件名，用于区分寄存器中的值的来源"/>
                        <Int Content="Int型的数据"/>
                        <Float Content="Float型的数据"/>
                        <Bool Content="Bool型的数据"/>
                        <Ulong Content="Ulong型的数据"/>
                        <String Content="String型的数据"/>
                </WriteRegister>
                <Sequence Content="从左到右运行子节点，一旦有子节点返回失败则终止"
			ReturnSuccess="所有子节点均返回成功"
			ReturnFailure="无子节点 或 有节点返回失败"/>
                <Selector Content="从左到右运行子节点，一旦有子节点返回成功则终止"
			ReturnSuccess="有节点返回成功"
			ReturnFailure="无子节点 或 所有节点返回失败"/>
                <RandomSequence Content="随机运行子节点，一旦有子节点返回失败则终止"
			ReturnSuccess="所有子节点均返回成功"
			ReturnFailure="无子节点 或 有节点返回失败"/>
                <RandomSelector Content="随机运行子节点，一旦有子节点返回成功则终止"
			ReturnSuccess="有节点返回成功"
			ReturnFailure="无子节点 或 所有节点返回失败"/>
                <For Content="循环运行Children节点，注意不要死循环。&#xD;Init，整个循环刚开始时的初始化节点。&#xD;Cond，每次循环前的判断节点，如失败则结束循环。&#xD;Inc，每次循环后的操作节点"
			ReturnSuccess="无ExitValue正常结束循环 或 ExitValue生效"
			ReturnFailure="ExitValue未生效 或 Cond和Children节点均没有（无法结束循环。此时For的任何子节点都不会跑）">
                        <ExitValue Content="子节点返回此值时，提前退出遍历"/>
		</For>
                <ForEach Content="遍历数组，每取出一个值，调用一次子节点。"
			ReturnSuccess="无ExitValue正常结束循环 或 ExitValue生效"
			ReturnFailure="ExitValue未生效 或 无子节点">
			<Collection Content="数组"/>
                        <Current Content="当前遍历取出的值"/>
                        <ExitValue Content="子节点返回此值时，提前退出遍历"/>
                </ForEach>
                <Loop Content="运行子节点若干次。For的简化版"          		
			ReturnSuccess="无ExitValue正常结束循环 或 ExitValue生效"
			ReturnFailure="ExitValue未生效 或 无子节点">
                        <Count Content="次数"/>
                        <Current Content="当前次数，从0开始"/>
                        <ExitValue Content="子节点返回此值时，提前退出遍历"/>
                </Loop>
                <Calculator Content="计算器"
			ReturnSuccess="始终成功">
                        <Opl Content="保存计算结果"/>
                        <Opr1 Content="左边的操作数"/>
                        <Opr2 Content="右边的操作数"/>
                        <Operator Content="操作符号"/>
                </Calculator>
                <Comparer Content="比较器。返回比较结果一致与否"
			ReturnSuccess="结果与期望一致">
                        <Opl Content="左边的操作数"/>
                        <Opr Content="右边的操作数"/>
                        <Operator Content="操作符号"/>
                </Comparer>
                <SetData Content="赋值器"
			ReturnSuccess="始终成功">
                        <Target Content="目标变量"/>
                        <Source Content="源值"/>
                </SetData>
                <Random Content="随机器"
			ReturnSuccess="始终成功">
                        <Target Content="保存计算结果"/>
                        <Bound1 Content="最小值，闭区间"/>
                        <Bound2 Content="最大值，开区间"/>
                </Random>
                <RandomSelect Content="随机选一个"
			ReturnFailure="数组为空">
                        <Input Content="输入"/>
                        <Output Content="输出"/>
                </RandomSelect>
                <Shuffle Content="乱序"
			ReturnSuccess="始终成功">
                        <Input Content="输入"/>
                        <Output Content="输出"/>
                </Shuffle>
                <AlwaysSuccess Content="总是返回成功"/>
                <AlwaysFailure Content="总是返回失败"/>
                <Invertor Content="运行并反转子节点的结果"/>
                <IfThenElse Content="如果If节点返回成功，则运行并返回Then节点，否则运行并返回Else节点"
			ReturnSuccess="Then/Else返回成功"
			ReturnFailure="没有If 或 没有Then/Else 或 Then/Else返回失败"/>
                <SwitchCase Content="找到Cases中与Switch相等的值，并运行和返回对应的子节点。没有则运行和返回Default子节点"
			ReturnSuccess="对应Case返回成功"
			ReturnFailure="Case和子节点数量不一致 或 对应Case返回失败 或 想运行却没有Default">
                        <Switch Content="比较值"/>
                        <Cases Content="候选值。与子节点数量一致，并一一对应"/>
                </SwitchCase>
                <PiecewiseFunction Content="分段函数。函数描述为一系列的坐标关键点，点之间的值为线性插值"
			ReturnFailure="关键点长度不匹配 或 为空">
                        <KeyPointX Content="关键点的X坐标数组"/>
                        <KeyPointY Content="关键点的Y坐标数组"/>
                        <InputX Content="输入的X坐标"/>
                        <OutputY Content="输出的Y坐标"/>
                </PiecewiseFunction>
                <Dice Content="骰子。可自定义面数，每个面的值，和概率。"
			ReturnFailure="Distribution和Values长度不匹配 或 Input不在范围[0, Distribution的所有数值的和)">
                        <Distribution Content="每个面的概率，可以是任意大的正数值"/>
                        <Values Content="每个面的值，和概率一一对应"/>
                        <Input Content="手动扔骰子的随机值，须落在 [0, Distribution的所有数值的和) 之间"/>
                        <Output Content="输出值"/>
                        <IgnoreInput Content="是否忽略Input。忽略则自动扔骰子"/>
                </Dice>
                <SubTree Content="运行并返回子树"
			ReturnSuccess="子树返回成功"
			ReturnFailure="没有子树 或 子树返回失败">
                        <TreeName Content="子树名，如在子文件夹需包含相对路径"/>
                        <Identification Content="唯一ID名，用于通过配表来替换此子树"/>
                </SubTree>
                <Wait Content="等待若干次心跳后继续"
			ReturnSuccess="始终成功">
                        <TickCount Content="等待心跳次数"/>
                </Wait>
                <ClearArray Content="清空数组"
			ReturnSuccess="始终成功">
                        <Array Content="目标数组"/>
                </ClearArray>
                <GetArrayLength Content="获取数组长度"
			ReturnSuccess="始终成功">
                        <Array Content="目标数组"/>
                        <Length Content="存储数组的长度"/>
                </GetArrayLength>
                <ArrayPushElement Content="数组尾部添加元素"
			ReturnSuccess="始终成功">
                        <Array Content="目标数组"/>
                        <Element Content="新元素"/>
                </ArrayPushElement>
                <GenIndexArray Content="生成一个自然数序列"
			ReturnSuccess="正常情况下始终成功">
                        <Input Content="参照数组或者长度，只能是数组类型或者整型"/>
                        <Output Content="从0开始，长度等于Input数组长度，或Input"/>
                </GenIndexArray>
                <IsArrayEmpty Content="数组长度是否为空">
                        <Array Content="目标数组"/>
                </IsArrayEmpty>
                <FSMSetCondition Content="设置状态机转换条件"
			ReturnSuccess="始终成功">
                        <Conditions Content="条件名"/>
                        <Operator Content="开关"/>
                </FSMSetCondition>
                <FSMClearConditions Content="清空所有状态机转换条件" 
			ReturnSuccess="始终成功"/>
        </Nodes>
        <Hierachies>
                <Hierachy Value = "1">Actions</Hierachy>
                <Hierachy Value = "2">Decorators</Hierachy>
                <Hierachy Value = "3">Compositors</Hierachy>
                <Hierachy Value = "4">Arrays</Hierachy>
                <Hierachy Value = "11">GeneralActions</Hierachy>
                <Hierachy Value = "21">CustomAction1</Hierachy>
                <Hierachy Value = "121">CustomAction2</Hierachy>
        </Hierachies>
</Description>